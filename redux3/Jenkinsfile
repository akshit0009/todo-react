pipeline {
    agent any

    stages {
        stage('Install Dependencies') {
            steps {
                script {
                    sh 'npm install bootstrap react-bootstrap'
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    // Build the Docker image
                    sh 'docker build -t react-app redux3/'
                }
            }
        }

        stage('Run Docker Container') {
            steps {
                script {
                    def containerName = 'react-app-container'

                    // Stop and remove the existing container if it's running
                    sh "docker stop ${containerName} || true"
                    sh "docker rm ${containerName} || true"

                    // Run the Docker container
                    sh "docker run -p 3000:3000 -d --name ${containerName} react-app > build.log 2>&1"
                }
            }
        }

        stage('Log Events') {
    steps {
        script {
            def timestamp = new Date().time
            def logEvents = """[
                {
                    "message": "Example log event 1",
                    "timestamp": ${timestamp}
                },
                {
                    "message": "Example log event 2",
                    "timestamp": ${timestamp}
                }
            ]"""

            def credentialsId = 'my-aws-credentials-id'
            def region = 'ap-south-1'
            def logGroupName = 'my-log-group'
            def logStreamName = '20240217'

            // Create the log group
            sh "aws logs create-log-group --log-group-name ${logGroupName} --region ${region}"

            // Create the log stream
            sh "aws logs create-log-stream --log-group-name ${logGroupName} --log-stream-name ${logStreamName} --region ${region}"

            // Put log events
            sh """
                aws logs put-log-events --log-group-name ${logGroupName} --log-stream-name ${logStreamName} --region ${region} --log-events file:///dev/stdin <<EOF
                ${logEvents}
EOF
            """
            env.AWS_ACCESS_KEY_ID = credentialsId
            env.AWS_SECRET_ACCESS_KEY = credentialsId + ':my-secret-key'
        }
    }
}
    }
}
